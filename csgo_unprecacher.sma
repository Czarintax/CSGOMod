#include <amxmodx>
#include <cstrike>
#include <fakemeta>

#define PLUGIN "CS:GO Unprecacher"
#define VERSION "2.0"
#define AUTHOR "O'Zone"

public plugin_precache()
{
	register_plugin(PLUGIN, VERSION, AUTHOR);

	register_forward(FM_PrecacheModel, "unprecache_models");
	register_forward(FM_PrecacheSound, "uprecache_sounds");
}

new const sounds[][] = {
	"ambience\3dmbridge.wav",
	"ambience\3dmeagle.wav",
	"ambience\3dmstart.wav",
	"ambience\3dmthrill.wav",
	"ambience\alarm1.wav",
	"ambience\arabmusic.wav",
	"ambience\Birds1.wav",
	"ambience\Birds2.wav",
	"ambience\Birds3.wav",
	"ambience\Birds4.wav",
	"ambience\Birds5.wav",
	"ambience\Birds6.wav",
	"ambience\Birds7.wav",
	"ambience\Birds8.wav",
	"ambience\Birds9.wav",
	"ambience\car1.wav",
	"ambience\car2.wav",
	"ambience\cat1.wav",
	"ambience\chimes.wav",
	"ambience\cicada3.wav",
	"ambience\copter.wav",
	"ambience\cow.wav",
	"ambience\crow.wav",
	"ambience\dog1.wav",
	"ambience\dog2.wav",
	"ambience\dog3.wav",
	"ambience\dog4.wav",
	"ambience\dog5.wav",
	"ambience\dog6.wav",
	"ambience\dog7.wav",
	"ambience\doorbell.wav",
	"ambience\fallscream.wav",
	"ambience\guit1.wav",
	"ambience\kajika.wav",
	"ambience\lv1.wav",
	"ambience\lv2.wav",
	"ambience\lv3.wav",
	"ambience\lv4.wav",
	"ambience\lv5.wav",
	"ambience\lv6.wav",
	"ambience\lv_elvis.wav",
	"ambience\lv_fruit1.wav",
	"ambience\lv_fruit2.wav",
	"ambience\lv_fruitwin.wav",
	"ambience\lv_jubilee.wav",
	"ambience\lv_neon.wav",
	"ambience\Opera.wav",
	"ambience\rain.wav",
	"ambience\ratchant.wav",
	"ambience\rd_shipshorn.wav",
	"ambience\rd_waves.wav",
	"ambience\sheep.wav",
	"ambience\sparrow.wav",
	"ambience\thunder_clap.wav",
	"ambience\waterrun.wav",
	"ambience\wolfhowl01.wav",
	"ambience\wolfhowl02.wav",
	"de_torn\tk_steam.wav",
	"de_torn\tk_windStreet.wav",
	"de_torn\torn_AK-47.wav",
	"de_torn\torn_ambience.wav",
	"de_torn\torn_Bomb1.wav",
	"de_torn\torn_Bomb2.wav",
	"de_torn\torn_MGun1.wav",
	"de_torn\torn_Templewind.wav",
	"de_torn\torn_thndrstrike.wav",
	"de_torn\torn_water1.wav",
	"de_torn\torn_water2.wav",
	"events\enemy_died.wav",
	"events\friend_died.wav",
	"events\task_complete.wav",
	"events\tutor_msg.wav",
	"hostage\hos1.wav",
	"hostage\hos2.wav",
	"hostage\hos3.wav",
	"hostage\hos4.wav",
	"hostage\hos5.wav",
	"items\equip_nvg.wav",
	"items\kevlar.wav",
	"items\nvg_off.wav",
	"items\nvg_on.wav",
	"items\tr_kevlar.wav",
	"plats\vehicle1.wav",
	"plats\vehicle2.wav",
	"plats\vehicle3.wav",
	"plats\vehicle4.wav",
	"plats\vehicle6.wav",
	"plats\vehicle7.wav",
	"plats\vehicle_brake1.wav",
	"plats\vehicle_ignition.wav",
	"plats\vehicle_start1.wav",
	"player\breathe1.wav",
	"player\breathe2.wav",
	"player\gasp1.wav",
	"player\gasp2.wav",
	"player\pl_die1.wav",
	"player\pl_dirt1.wav",
	"player\pl_dirt2.wav",
	"player\pl_dirt3.wav",
	"player\pl_dirt4.wav",
	"player\pl_duct1.wav",
	"player\pl_duct2.wav",
	"player\pl_duct3.wav",
	"player\pl_duct4.wav",
	"player\pl_fallpain1.wav",
	"player\pl_fallpain2.wav",
	"player\pl_fallpain3.wav",
	"player\pl_grate1.wav",
	"player\pl_grate2.wav",
	"player\pl_grate3.wav",
	"player\pl_grate4.wav",
	"player\pl_jump1.wav",
	"player\pl_jump2.wav",
	"player\pl_pain2.wav",
	"player\pl_pain4.wav",
	"player\pl_pain5.wav",
	"player\pl_pain6.wav",
	"player\pl_pain7.wav",
	"player\pl_shell1.wav",
	"player\pl_shot1.wav",
	"player\pl_snow5.wav",
	"player\pl_snow6.wav",
	"player\pl_step1.wav",
	"player\pl_step2.wav",
	"player\pl_step3.wav",
	"player\pl_step4.wav",
	"player\pl_swim1.wav",
	"player\pl_swim2.wav",
	"player\pl_swim3.wav",
	"player\pl_swim4.wav",
	"player\pl_tile1.wav",
	"player\pl_tile2.wav",
	"player\pl_tile3.wav",
	"player\pl_tile4.wav",
	"radio\blow.wav",
	"radio\bombdef.wav",
	"radio\bombpl.wav",
	"radio\circleback.wav",
	"radio\clear.wav",
	"radio\com_followcom.wav",
	"radio\com_getinpos.wav",
	"radio\com_go.wav",
	"radio\com_reportin.wav",
	"radio\ct_affirm.wav",
	"radio\ct_backup.wav",
	"radio\ct_coverme.wav",
	"radio\ct_enemys.wav",
	"radio\ct_fireinhole.wav",
	"radio\ct_imhit.wav",
	"radio\ct_inpos.wav",
	"radio\ct_point.wav",
	"radio\ct_reportingin.wav",
	"radio\ctwin.wav",
	"radio\elim.wav",
	"radio\enemydown.wav",
	"radio\fallback.wav",
	"radio\fireassis.wav",
	"radio\flankthem.wav",
	"radio\followme.wav",
	"radio\getout.wav",
	"radio\go.wav",
	"radio\hitassist.wav",
	"radio\hosdown.wav",
	"radio\letsgo.wav",
	"radio\locknload.wav",
	"radio\matedown.wav",
	"radio\meetme.wav",
	"radio\moveout.wav",
	"radio\negative.wav",
	"radio\position.wav",
	"radio\regroup.wav",
	"radio\rescued.wav",
	"radio\roger.wav",
	"radio\rounddraw.wav",
	"radio\sticktog.wav",
	"radio\stormfront.wav",
	"radio\takepoint.wav",
	"radio\terwin.wav",
	"radio\vip.wav",
	"storm\thunder-theme.wav",
	"radio/blow.wav",
	"radio/bombdef.wav",
	"radio/bombpl.wav",
	"radio/circleback.wav",
	"radio/clear.wav",
	"radio/com_followcom.wav",
	"radio/com_getinpos.wav",
	"radio/com_go.wav",
	"radio/com_reportin.wav",
	"radio/ct_affirm.wav",
	"radio/ct_backup.wav",
	"radio/ct_coverme.wav",
	"radio/ct_enemys.wav",
	"radio/ct_fireinhole.wav",
	"radio/ct_inpos.wav",
	"radio/ct_point.wav",
	"radio/ct_reportingin.wav",
	"radio/ctwin.wav",
	"radio/elim.wav",
	"radio/enemydown.wav",
	"radio/fallback.wav",
	"radio/fireassis.wav",
	"radio/flankthem.wav",
	"radio/followme.wav",
	"radio/plats.wav",
	"plats/vehicle_brake1.wav",
	"plats/vehicle_ignition.wav",
	"plats/vehicle_start1.wav",
	"plats/vehicle1.wav",
	"plats/vehicle2.wav",
	"plats/vehicle3.wav",
	"plats/vehicle4.wav",
	"plats/vehicle6.wav",
	"plats/vehicle7.wav",
	"plats/plats.wav",
	"plats/plats.wav",
	"plats/plats.wav",
	"items/tr_kevlar.wav",
	"items/weapondrop1.wav",
	"player/pl_shot1.wav",
	"radio/locknload.wav",
	"radio/letsgo.wav",
	"radio/moveout.wav",
	"radio/com_go.wav",
	"radio/rescued.wav",
	"radio/rounddraw.wav",
	"items/kevlar.wav",
	"items/nvg_off.wav",
	"items/equip_nvg.wav",
	"weapons/explode3.wav",
	"weapons/explode4.wav",
	"weapons/explode5.wav",
	"player/pl_fallpain2.wav",
	"player/pl_fallpain3.wav",
	"player/pl_snow5.wav",
	"player/pl_snow6.wav",
	"common/npc_step1.wav",
	"common/npc_step2.wav",
	"common/npc_step3.wav",
	"common/npc_step4.wav",
	"player/pl_dirt1.wav",
	"player/pl_dirt2.wav",
	"player/pl_dirt3.wav",
	"player/pl_dirt4.wav",
	"player/pl_duct1.wav",
	"player/pl_duct2.wav",
	"player/pl_duct3.wav",
	"player/pl_duct4.wav",
	"player/pl_grate1.wav",
	"player/pl_grate2.wav",
	"player/pl_grate3.wav",
	"player/pl_grate4.wav",
	"player/pl_tile1.wav",
	"player/pl_tile2.wav",
	"player/pl_tile3.wav",
	"player/pl_tile4.wav",
	"player/pl_swim1.wav",
	"player/pl_swim2.wav",
	"player/pl_swim3.wav",
	"player/pl_swim4.wav",
	"debris/wood1.wav",
	"debris/wood2.wav",
	"debris/wood3.wav",
	"plats/train_use1.wav",
	"plats/vehicle_ignition.wav",
	"buttons/spark5.wav",
	"buttons/spark6.wav",
	"debris/glass2.wav",
	"debris/glass3.wav",
	"common/bodysplat.wav",
	"player/pl_pain2.wav",
	"player/pl_pain4.wav",
	"player/pl_pain5.wav",
	"player/pl_pain6.wav",
	"player/pl_pain7.wav",
	"common/wpn_hudoff.wav",
	"common/wpn_moveselect.wav",
	"player/geiger6.wav",
	"player/geiger5.wav",
	"player/geiger4.wav",
	"player/geiger3.wav",
	"player/geiger2.wav",
	"player/geiger1.wav",
	"buttons/bell1.wav",
	"buttons/blip1.wav",
	"buttons/blip2.wav",
	"buttons/button11.wav",
	"buttons/latchunlocked2.wav",
	"buttons/lightswitch2.wav",
	"ambience/quail1.wav",
	"events/tutor_msg.wav",
	"events/enemy_died.wav",
	"events/friend_died.wav",
	"events/task_complete.wav",
	"items/suitchargeok1.wav",
	"common/bodydrop3.wav",
	"common/bodydrop4.wav",
	"weapons/ric1.wav",
	"weapons/ric2.wav",
	"weapons/ric3.wav",
	"weapons/ric4.wav",
	"weapons/ric5.wav",
	"weapons/ric_metal-1.wav",
	"weapons/ric_metal-2.wav",
	"weapons/ric_conc-1.wav",
	"weapons/ric_conc-2.wav"
}

new const models[][] = {
	"bag.mdl",
	"bigtree.mdl",
	"bush.mdl",
	"orange.mdl",
	"pallet_with_bags.mdl",
	"pallet_with_bags2.mdl",
	"palmtree.mdl",
	"PG-150.mdl",
	"pshell.mdl",
	"rshell.mdl",
	"rshell_big.mdl",
}

public unprecache_models(const model[])
{
	for (new i = 0; i < sizeof(models); i++) {
		if (containi(model, models[i]) != -1) {
			forward_return(FMV_CELL, 0);

			return FMRES_SUPERCEDE ;
		}
	}

	return FMRES_IGNORED;
}

public uprecache_sounds(const sound[])
{
	for (new i = 0; i < sizeof(sounds); i++) {
		if (containi(sound, sounds[i]) != -1) {
			forward_return(FMV_CELL, 0);

			return FMRES_SUPERCEDE;
		}
	}

	return FMRES_IGNORED;
}
